From af58fcbb7a0c501a5cd06ae6c5eaed17204b065c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B6rn=20Bidar?= <theodorstormgrade@gmail.com>
Date: Fri, 3 Jul 2020 22:15:49 +0200
Subject: [PATCH] (hybris) Silence some build errors to let the systemimage
 build
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Previous changes to bionic and the build system removed things that
art depends on. Either remove the parts that create errors or replace
them and insert dummy data to allow the building of the systemimage.

Signed-off-by: Bj√∂rn Bidar <theodorstormgrade@gmail.com>
Change-Id: Ide41188b6263a22c371ec28786bbc1ef1ee62df7
---
 build/Android.gtest.mk       | 20 ++++++++++----------
 runtime/thread-current-inl.h |  2 +-
 runtime/thread.cc            |  4 ++--
 runtime/thread_list.cc       |  2 +-
 4 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/build/Android.gtest.mk b/build/Android.gtest.mk
index 03aae07587..20e38df7b2 100644
--- a/build/Android.gtest.mk
+++ b/build/Android.gtest.mk
@@ -73,28 +73,28 @@ $(foreach dir,$(GTEST_DEX_DIRECTORIES), $(eval $(call build-art-test-dex,art-gte
 
 # Create rules for MainStripped, a copy of Main with the classes.dex stripped
 # for the oat file assistant tests.
-ART_TEST_HOST_GTEST_MainStripped_DEX := $(basename $(ART_TEST_HOST_GTEST_Main_DEX))Stripped$(suffix $(ART_TEST_HOST_GTEST_Main_DEX))
-ART_TEST_TARGET_GTEST_MainStripped_DEX := $(basename $(ART_TEST_TARGET_GTEST_Main_DEX))Stripped$(suffix $(ART_TEST_TARGET_GTEST_Main_DEX))
+ART_TEST_HOST_GTEST_MainStripped_DEX := $(basename $(ART_TEST_HOST_GTEST_Main_DEX))$(suffix $(ART_TEST_HOST_GTEST_Main_DEX))
+ART_TEST_TARGET_GTEST_MainStripped_DEX := $(basename $(ART_TEST_TARGET_GTEST_Main_DEX))$(suffix $(ART_TEST_TARGET_GTEST_Main_DEX))
 
 # Create rules for MainUncompressed, a copy of Main with the classes.dex uncompressed
 # for the dex2oat tests.
-ART_TEST_HOST_GTEST_MainUncompressed_DEX := $(basename $(ART_TEST_HOST_GTEST_Main_DEX))Uncompressed$(suffix $(ART_TEST_HOST_GTEST_Main_DEX))
-ART_TEST_TARGET_GTEST_MainUncompressed_DEX := $(basename $(ART_TEST_TARGET_GTEST_Main_DEX))Uncompressed$(suffix $(ART_TEST_TARGET_GTEST_Main_DEX))
+ART_TEST_HOST_GTEST_MainUncompressed_DEX := $(basename $(ART_TEST_HOST_GTEST_Main_DEX))$(suffix $(ART_TEST_HOST_GTEST_Main_DEX))
+ART_TEST_TARGET_GTEST_MainUncompressed_DEX := $(basename $(ART_TEST_TARGET_GTEST_Main_DEX))$(suffix $(ART_TEST_TARGET_GTEST_Main_DEX))
 
 # Create rules for UncompressedEmpty, a classes.dex that is empty and uncompressed
 # for the dex2oat tests.
-ART_TEST_HOST_GTEST_EmptyUncompressed_DEX := $(basename $(ART_TEST_HOST_GTEST_Main_DEX))EmptyUncompressed$(suffix $(ART_TEST_HOST_GTEST_Main_DEX))
-ART_TEST_TARGET_GTEST_EmptyUncompressed_DEX := $(basename $(ART_TEST_TARGET_GTEST_Main_DEX))EmptyUncompressed$(suffix $(ART_TEST_TARGET_GTEST_Main_DEX))
+ART_TEST_HOST_GTEST_EmptyUncompressed_DEX := $(basename $(ART_TEST_HOST_GTEST_Main_DEX))$(suffix $(ART_TEST_HOST_GTEST_Main_DEX))
+ART_TEST_TARGET_GTEST_EmptyUncompressed_DEX := $(basename $(ART_TEST_TARGET_GTEST_Main_DEX))$(suffix $(ART_TEST_TARGET_GTEST_Main_DEX))
 
 # Create rules for UncompressedEmptyAligned, a classes.dex that is empty, uncompressed,
 # and 4 byte aligned for the dex2oat tests.
-ART_TEST_HOST_GTEST_EmptyUncompressedAligned_DEX := $(basename $(ART_TEST_HOST_GTEST_Main_DEX))EmptyUncompressedAligned$(suffix $(ART_TEST_HOST_GTEST_Main_DEX))
-ART_TEST_TARGET_GTEST_EmptyUncompressedAligned_DEX := $(basename $(ART_TEST_TARGET_GTEST_Main_DEX))EmptyUncompressedAligned$(suffix $(ART_TEST_TARGET_GTEST_Main_DEX))
+ART_TEST_HOST_GTEST_EmptyUncompressedAligned_DEX := $(basename $(ART_TEST_HOST_GTEST_Main_DEX))$(suffix $(ART_TEST_HOST_GTEST_Main_DEX))
+ART_TEST_TARGET_GTEST_EmptyUncompressedAligned_DEX := $(basename $(ART_TEST_TARGET_GTEST_Main_DEX))$(suffix $(ART_TEST_TARGET_GTEST_Main_DEX))
 
 # Create rules for MultiDexUncompressed, a copy of MultiDex with the classes.dex uncompressed
 # for the OatFile tests.
-ART_TEST_HOST_GTEST_MultiDexUncompressed_DEX := $(basename $(ART_TEST_HOST_GTEST_MultiDex_DEX))Uncompressed$(suffix $(ART_TEST_HOST_GTEST_MultiDex_DEX))
-ART_TEST_TARGET_GTEST_MultiDexUncompressed_DEX := $(basename $(ART_TEST_TARGET_GTEST_MultiDex_DEX))Uncompressed$(suffix $(ART_TEST_TARGET_GTEST_MultiDex_DEX))
+ART_TEST_HOST_GTEST_MultiDexUncompressed_DEX := $(basename $(ART_TEST_HOST_GTEST_MultiDex_DEX))$(suffix $(ART_TEST_HOST_GTEST_MultiDex_DEX))
+ART_TEST_TARGET_GTEST_MultiDexUncompressed_DEX := $(basename $(ART_TEST_TARGET_GTEST_MultiDex_DEX))(suffix $(ART_TEST_TARGET_GTEST_MultiDex_DEX))
 
 ifdef ART_TEST_HOST_GTEST_Main_DEX
 $(ART_TEST_HOST_GTEST_MainStripped_DEX): $(ART_TEST_HOST_GTEST_Main_DEX)
diff --git a/runtime/thread-current-inl.h b/runtime/thread-current-inl.h
index 9241b1f875..904a62ccff 100644
--- a/runtime/thread-current-inl.h
+++ b/runtime/thread-current-inl.h
@@ -34,7 +34,7 @@ inline Thread* Thread::Current() {
     return nullptr;
   } else {
 #ifdef ART_TARGET_ANDROID
-    void* thread = __get_tls()[TLS_SLOT_ART_THREAD_SELF];
+    void* thread = __get_tls()[99];
 #else
     void* thread = pthread_getspecific(Thread::pthread_key_self_);
 #endif
diff --git a/runtime/thread.cc b/runtime/thread.cc
index be0e30ad11..dd3d07d920 100644
--- a/runtime/thread.cc
+++ b/runtime/thread.cc
@@ -933,7 +933,7 @@ bool Thread::Init(ThreadList* thread_list, JavaVMExt* java_vm, JNIEnvExt* jni_en
   }
 
 #ifdef ART_TARGET_ANDROID
-  __get_tls()[TLS_SLOT_ART_THREAD_SELF] = this;
+  __get_tls()[99] = this;
 #else
   CHECK_PTHREAD_CALL(pthread_setspecific, (Thread::pthread_key_self_, this), "attach self");
 #endif
@@ -2199,7 +2199,7 @@ void Thread::ThreadExitCallback(void* arg) {
         "going to use a pthread_key_create destructor?): " << *self;
     CHECK(is_started_);
 #ifdef ART_TARGET_ANDROID
-    __get_tls()[TLS_SLOT_ART_THREAD_SELF] = self;
+    __get_tls()[99] = self;
 #else
     CHECK_PTHREAD_CALL(pthread_setspecific, (Thread::pthread_key_self_, self), "reattach self");
 #endif
diff --git a/runtime/thread_list.cc b/runtime/thread_list.cc
index ed6b2c91e5..06e6f6585b 100644
--- a/runtime/thread_list.cc
+++ b/runtime/thread_list.cc
@@ -1482,7 +1482,7 @@ void ThreadList::Unregister(Thread* self) {
   // Clear the TLS data, so that the underlying native thread is recognizably detached.
   // (It may wish to reattach later.)
 #ifdef ART_TARGET_ANDROID
-  __get_tls()[TLS_SLOT_ART_THREAD_SELF] = nullptr;
+  __get_tls()[99] = nullptr;
 #else
   CHECK_PTHREAD_CALL(pthread_setspecific, (Thread::pthread_key_self_, nullptr), "detach self");
 #endif
-- 
2.27.0

