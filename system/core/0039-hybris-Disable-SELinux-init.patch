From 9e404a42d8916112cdcc4f503b2004b09d424257 Mon Sep 17 00:00:00 2001
From: Matti Kosola <matti.kosola@jolla.com>
Date: Wed, 4 Sep 2019 12:07:34 +0200
Subject: [PATCH 39/40] (hybris) Disable SELinux init.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Sailfish OS SELinux initialization is done by systemd.
Conflicting init has been resolved by disabling SELinux
initialization from droid hal init.

Change-Id: I8a2a729671d224c4cc266a8219bee357611ded51
Signed-off-by: Matti Kosola <matti.kosola@jolla.com>
Signed-off-by: Bj√∂rn Bidar <theodorstormgrade@gmail.com>
---
 init/first_stage_init.cpp |  4 ++++
 init/init.cpp             |  7 +++++++
 init/selinux.cpp          | 15 +++++++++++++++
 3 files changed, 26 insertions(+)

diff --git a/init/first_stage_init.cpp b/init/first_stage_init.cpp
index 0e398b453..805bad2e5 100644
--- a/init/first_stage_init.cpp
+++ b/init/first_stage_init.cpp
@@ -47,6 +47,8 @@ using namespace std::literals;
 
 namespace fs = std::filesystem;
 
+#define SYSTEMD_SELINUX
+
 namespace android {
 namespace init {
 
@@ -129,7 +131,9 @@ int FirstStageMain(int argc, char** argv) {
     gid_t groups[] = {AID_READPROC};
     CHECKCALL(setgroups(arraysize(groups), groups));
     //CHECKCALL(mount("sysfs", "/sys", "sysfs", 0, NULL));
+#ifndef SYSTEMD_SELINUX
     CHECKCALL(mount("selinuxfs", "/sys/fs/selinux", "selinuxfs", 0, NULL));
+#endif
 
     CHECKCALL(mknod("/dev/kmsg", S_IFCHR | 0600, makedev(1, 11)));
 
diff --git a/init/init.cpp b/init/init.cpp
index 8ff468ea9..f2936d883 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -76,6 +76,8 @@ using android::base::Timer;
 using android::base::Trim;
 using android::fs_mgr::AvbHandle;
 
+#define SYSTEMD_SELINUX
+
 namespace android {
 namespace init {
 
@@ -358,11 +360,14 @@ static Result<Success> console_init_action(const BuiltinArguments& args) {
 static Result<Success> SetupCgroupsAction(const BuiltinArguments&) {
     // Have to create <CGROUPS_RC_DIR> using make_dir function
     // for appropriate sepolicy to be set for it
+
+#if DISABLED_FOR_HYBRIS_SUPPORT
     make_dir(android::base::Dirname(CGROUPS_RC_PATH), 0711);
     if (!CgroupSetup()) {
         return ErrnoError() << "Failed to setup cgroups";
     }
 
+#endif
     return Success();
 }
 
@@ -675,10 +680,12 @@ int SecondStageMain(int argc, char** argv) {
     unsetenv("INIT_AVB_VERSION");
     unsetenv("INIT_FORCE_DEBUGGABLE");
 
+#ifndef SYSTEMD_SELINUX
     // Now set up SELinux for second stage.
     SelinuxSetupKernelLogging();
     SelabelInitialize();
     SelinuxRestoreContext();
+#endif
 
     Epoll epoll;
     if (auto result = epoll.Open(); !result) {
diff --git a/init/selinux.cpp b/init/selinux.cpp
index 2fc027ba2..ce506dd5e 100644
--- a/init/selinux.cpp
+++ b/init/selinux.cpp
@@ -74,6 +74,8 @@ using android::base::Timer;
 using android::base::unique_fd;
 using android::fs_mgr::AvbHandle;
 
+#define SYSTEMD_SELINUX
+
 namespace android {
 namespace init {
 
@@ -83,6 +85,8 @@ selabel_handle* sehandle = nullptr;
 
 enum EnforcingStatus { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
+
 EnforcingStatus StatusFromCmdline() {
     EnforcingStatus status = SELINUX_ENFORCING;
 
@@ -193,6 +197,7 @@ bool ForkExecveAndWaitForCompletion(const char* filename, char* const argv[]) {
         return false;
     }
 }
+#endif
 
 bool ReadFirstLine(const char* file, std::string* line) {
     line->clear();
@@ -206,6 +211,8 @@ bool ReadFirstLine(const char* file, std::string* line) {
     return true;
 }
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
+
 bool FindPrecompiledSplitPolicy(std::string* file) {
     file->clear();
     // If there is an odm partition, precompiled_sepolicy will be in
@@ -258,6 +265,8 @@ bool FindPrecompiledSplitPolicy(std::string* file) {
     return true;
 }
 
+#endif
+
 bool GetVendorMappingVersion(std::string* plat_vers) {
     if (!ReadFirstLine("/vendor/etc/selinux/plat_sepolicy_vers.txt", plat_vers)) {
         PLOG(ERROR) << "Failed to read /vendor/etc/selinux/plat_sepolicy_vers.txt";
@@ -276,6 +285,8 @@ bool IsSplitPolicyDevice() {
     return access(plat_policy_cil_file, R_OK) != -1;
 }
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
+
 bool LoadSplitPolicy() {
     // IMPLEMENTATION NOTE: Split policy consists of three CIL files:
     // * platform -- policy needed due to logic contained in the system image,
@@ -446,6 +457,7 @@ void SelinuxInitialize() {
     // init's first stage can't set properties, so pass the time to the second stage.
     setenv("INIT_SELINUX_TOOK", std::to_string(t.duration().count()).c_str(), 1);
 }
+#endif
 
 }  // namespace
 
@@ -520,12 +532,14 @@ int SelinuxGetVendorAndroidVersion() {
 
 // This function initializes SELinux then execs init to run in the init SELinux context.
 int SetupSelinux(char** argv) {
+#ifndef SYSTEMD_SELINUX
     InitKernelLogging(argv);
 
     if (REBOOT_BOOTLOADER_ON_PANIC) {
         InstallRebootSignalHandlers();
     }
 
+
     // Set up SELinux, loading the SELinux policy.
     SelinuxSetupKernelLogging();
     SelinuxInitialize();
@@ -546,6 +560,7 @@ int SetupSelinux(char** argv) {
     // panic and never return from this function.
     PLOG(FATAL) << "execv(\"" << path << "\") failed";
 
+#endif
     return 1;
 }
 
-- 
2.23.0

