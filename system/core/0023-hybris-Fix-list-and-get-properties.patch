From 3a1260bbc727738877c848f412655fbc315e1882 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Matti=20Lehtim=C3=A4ki?= <matti.lehtimaki@gmail.com>
Date: Tue, 16 Jan 2018 16:18:31 +0200
Subject: [PATCH 23/40] (hybris) Fix list and get properties.

Change-Id: I9deb65f147e941fc5c9f91793f851440d02260e1
---
 init/property_service.cpp | 32 +++++++++++++++++++++++++++++---
 1 file changed, 29 insertions(+), 3 deletions(-)

diff --git a/init/property_service.cpp b/init/property_service.cpp
index d13f3429c..b60d8d143 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -284,6 +284,12 @@ uint32_t InitPropertySet(const std::string& name, const std::string& value) {
 
     return result;
 }
+// Legacy definition
+typedef struct prop_msg_s {
+    unsigned cmd;
+    char name[PROP_NAME_MAX];
+    char value[PROP_VALUE_MAX];
+} prop_msg_t;
 
 class SocketConnection {
   public:
@@ -331,6 +337,17 @@ class SocketConnection {
         return result == sizeof(value);
     }
 
+    bool SendLegacyPropMsg(std::string name, std::string value) {
+        int result = 0;
+        prop_msg_t prop_msg;
+        memset(&prop_msg, 0, sizeof(prop_msg_t));
+        prop_msg.cmd = 0;
+        strlcpy(prop_msg.name, name.c_str(), PROP_NAME_MAX);
+        strlcpy(prop_msg.value, value.c_str(), PROP_VALUE_MAX);
+        result = TEMP_FAILURE_RETRY(send(socket_, &prop_msg, sizeof(prop_msg_t), 0));
+        return (result == sizeof(prop_msg_t));
+    }
+
     int socket() { return socket_; }
 
     const ucred& cred() { return cred_; }
@@ -594,14 +611,21 @@ static void handle_property_set_fd() {
       }
     case PROP_MSG_GETPROP: {
         int ret;
-        int n;
         char prop_name[PROP_NAME_MAX];
         char prop_value[PROP_VALUE_MAX];
+
+        /* Need to receive both since libhybris sends prop_msg_t type package. */
+        if (!socket.RecvChars(prop_name, PROP_NAME_MAX, &timeout_ms) ||
+            !socket.RecvChars(prop_value, PROP_VALUE_MAX, &timeout_ms)) {
+            PLOG(ERROR) << "sys_prop(PROP_MSG_GETPROP): error while reading name from the socket";
+            return;
+        }
+
         prop_name[PROP_NAME_MAX-1] = 0;
         prop_value[PROP_VALUE_MAX-1] = 0;
 
-        if (!is_legal_property_name(prop_name, strlen(prop_name))) {
-            ERROR("sys_prop: illegal property name. Got: \"%s\"\n", prop_name);
+        if (!IsLegalPropertyName(prop_name)) {
+            PLOG(ERROR) << "sys_prop(PROP_MSG_GETPROP): illegal property name. Got: " << prop_name;
             return;
         }
 
@@ -613,6 +637,7 @@ static void handle_property_set_fd() {
 
         /* Send the property value back */
         //TEMP_FAILURE_RETRY(send(s, &msg, sizeof(msg), 0));
+        socket.SendLegacyPropMsg(prop_name, prop_value);
         break;
       }
     case PROP_MSG_LISTPROP: {
@@ -622,6 +647,7 @@ static void handle_property_set_fd() {
             prop_name[0] = prop_value[0] = 0;
             __system_property_read(pi, prop_name, prop_value);
             //TEMP_FAILURE_RETRY(send(s, &msg, sizeof(msg), 0));
+            socket.SendLegacyPropMsg(prop_name, prop_value);
         }
         break;
       }
-- 
2.23.0

